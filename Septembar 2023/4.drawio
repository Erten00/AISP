<mxfile host="65bd71144e">
    <diagram id="ryt1JyRTmJbPCQ_Oswjp" name="Page-1">
        <mxGraphModel dx="1836" dy="750" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="1100" pageHeight="850" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <mxCell id="2" value="&lt;h3&gt;Prikazati kako bi se sačuvali brojevi 18, 41, 22, 44, 59, 32, 31, 73 u nizu dužine 13, korišćenjem heširanja.&amp;nbsp;&lt;/h3&gt;&lt;h3&gt;Napisati pseudo kod za traženje elemenata u heš tabeli. Objasniti šta je kolizija. Sortirati elemente korišćenjem qucik i heap sorta.&lt;/h3&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
                    <mxGeometry x="105" width="890" height="90" as="geometry"/>
                </mxCell>
                <mxCell id="3" value="Prvo morate odabrati odgovarajuću heš funkciju i rešiti kako ćete se nositi sa kolizijama. Evo pseudokoda za ovaj proces:&lt;br&gt;&lt;br&gt;&lt;br&gt;1. Inicijalizujte heš tabelu dužine 13.&lt;br&gt;2. Za svaki broj u nizu (18, 41, 22, 44, 59, 32, 31, 73), primenite heš funkciju da biste odredili indeks u tabeli:&lt;br&gt;&amp;nbsp; &amp;nbsp;- Heš funkcija može biti, na primer, &quot;indeks = broj % 13&quot;.&lt;br&gt;&amp;nbsp; &amp;nbsp;- Ako dođe do kolizije (dva broja daju isti indeks), morate rešiti kako ćete ih smestiti. Možete koristiti linearno heširanje (pomeraj se niz tabela dok ne nađete slobodno mesto) ili neku drugu tehniku.&lt;br&gt;&amp;nbsp; &amp;nbsp;- Na primer, ako 18 i 31 daju isti indeks, možete pomeriti jedan od njih na sledeće slobodno mesto, itd.&lt;br&gt;3. Nakon što ste sačuvali sve brojeve u heš tabeli, možete koristiti ovu tabelu za brzo pretraživanje elemenata.&lt;br&gt;&lt;br&gt;&lt;br&gt;Pseudokod za pretragu elemenata u heš tabeli:&lt;br&gt;1. Unesite broj koji želite da pronađete.&lt;br&gt;2. Primenite istu heš funkciju za taj broj da biste pronašli indeks u tabeli.&lt;br&gt;3. Proverite element(e) na tom indeksu i eventualno pomerajte se kroz tabelu ako postoji kolizija, dok ne pronađete traženi broj ili utvrdite da ga nema u tabeli.&lt;br&gt;&lt;br&gt;&lt;br&gt;```&lt;br&gt;&lt;br&gt;&lt;br&gt;Sada, za sortiranje elemenata koristeći quick sort i heap sort, evo pseudokoda za svaki od ovih algoritama:&lt;br&gt;&lt;br&gt;&lt;br&gt;**Quick Sort:**&lt;br&gt;&lt;br&gt;&lt;br&gt;```plaintext&lt;br&gt;1. Izaberite pivot element iz niza (na primer, srednji element).&lt;br&gt;2. Podelite niz na dva dela, jedan sa elementima manjim od pivota i drugi sa elementima većim od pivota.&lt;br&gt;3. Rekurzivno primenite quick sort na oba ova podniza.&lt;br&gt;4. Spojite ove podnize i pivota da biste dobili konačno sortiran niz.&lt;br&gt;```&lt;br&gt;&lt;br&gt;&lt;br&gt;**Heap Sort:**&lt;br&gt;&lt;br&gt;&lt;br&gt;```plaintext&lt;br&gt;1. Kreirajte max-heap od niza.&lt;br&gt;&amp;nbsp; &amp;nbsp;- Max-heap je binarno stablo gde je svaki čvor veći od svoje dece.&lt;br&gt;2. Uzimate maksimalni element iz max-heap-a (korijena) i stavljate ga na kraj niza.&lt;br&gt;3. Smanjite veličinu max-heap-a za 1.&lt;br&gt;4. Ponavljajte korake 2-3 dok ne sortirate ceo niz.&lt;br&gt;```&lt;br&gt;&lt;br&gt;&lt;br&gt;Ovo su osnovni koraci za quick sort i heap sort. Primena ovih koraka na vaš niz će rezultirati sortiranim nizom." style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
                    <mxGeometry y="80" width="850" height="730" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>